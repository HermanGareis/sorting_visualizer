{"version":3,"sources":["algorithms/helpers.js","algorithms/bubbleSort.js","algorithms/mergeSort.js","App.js","reportWebVitals.js","index.js"],"names":["swap","array","i","j","c","bubbleSort","animations","isSorted","counter","length","push","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","PRIMARY_COLOR","SORTED_COLOR","App","props","generateRandomNumber","min","max","random","generateRandomArray","count","state","temp","changeBarsColor","setState","color","console","log","arrayBars","document","getElementsByClassName","barStyle","style","setTimeout","backgroundColor","delay","this","title","getElementById","value","disabled","animationSpeed","rangeValue","disableButtons","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","enableButtons","barOneNewHeight","barTwoNeWHeight","height","newHeight","id","class","className","type","step","defaultValue","onClick","mergeSort","map","idx","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a01c5ef4.chunk.js","sourcesContent":["export function swap(array, i, j) {\r\n    let c = array[i];\r\n    array[i] = array[j];\r\n    array[j] = c;\r\n    return array;\r\n}","import {swap} from './helpers';\r\n\r\nfunction bubbleSort(array){\r\n    \r\n    const animations = [];\r\n    let isSorted = false;\r\n    let counter = 0;\r\n\r\n    while (!isSorted) {\r\n        isSorted = true;\r\n        for (let i = 0; i < array.length - 1 - counter; i++) {\r\n            animations.push([i, i+1]); //elements we are comparing\r\n            animations.push([i, i+1]); //we push them again to revert the color \r\n            if (array[i]>array[i+1]) {\r\n                animations.push([i, i+1, array[i], array[i+1], counter, true]); // we push idx of the values we need to swap, plus the actual values , plus the counter to change color of sorted values\r\n                swap(array, i, i+1);\r\n                isSorted = false;\r\n            }\r\n            else{\r\n                animations.push([i,i+1,false]);\r\n            }\r\n        }\r\n        counter++;   \r\n    }\r\n    return animations; \r\n}\r\n\r\nexport default bubbleSort;\r\n\r\n","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","import React from 'react';\n\nimport bubbleSort from './algorithms/bubbleSort';\nimport {getMergeSortAnimations} from './algorithms/mergeSort';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//CSS IMPORTS\nimport './App.css';\n\nconst PRIMARY_COLOR = 'cyan';\nconst SECONDARY_COLOR = 'red';\nconst SORTED_COLOR = 'rgb(74,245,72)';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  \n  this.state = {\n    array: [],\n    count: 200, //number of array bars\n    delay: 10, //animation\n  }}\n\n  componentDidMount(){\n    this.generateRandomArray();\n    document.title = \"Sorting Visualizer\"\n  }\n\n  generateRandomNumber = (min, max) => {\n    return Math.floor(Math.random()*(max-min)+min);\n  }\n\n  generateRandomArray = () => {\n    const count = this.state.count;\n    const temp = [];\n\n    this.changeBarsColor(PRIMARY_COLOR);\n\n    for (let i = 0; i < count; i++) {\n      temp.push(this.generateRandomNumber(5,700));\n    }\n    this.setState({\n      array: temp,\n\n    });\n  }\n\n   rangeValue() {\n    var input = document.getElementById(\"customRange\").value;\n    return input\n}\n\n  disableButtons(){\n    document.getElementById(\"button1\").disabled = true;\n    document.getElementById(\"button2\").disabled = true;\n    document.getElementById(\"button3\").disabled = true;\n    document.getElementById(\"customRange\").disabled = true;\n\n  }\n  \n  enableButtons(){\n    document.getElementById(\"button1\").disabled = false;\n    document.getElementById(\"button2\").disabled = false;\n    document.getElementById(\"button3\").disabled = false;\n    document.getElementById(\"customRange\").disabled = false;\n  }\n\n  changeBarsColor = (color) =>{\n    console.log(2);\n    var arrayBars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < arrayBars.length; i++) {\n      const barStyle = arrayBars[i].style;\n      setTimeout(() => {\n        barStyle.backgroundColor = color;\n      }, i * 2);\n      \n    }\n\n  }\n\n  bubbleSort() {\n    this.state.delay=0.5;\n    var animationSpeed = this.rangeValue();\n    \n    this.disableButtons();\n    const animations = bubbleSort(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          if (i === animations.length - 20) {\n            this.enableButtons();\n            this.changeBarsColor(SORTED_COLOR);\n          }\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;  \n        }, i * this.state.delay/animationSpeed);\n      }\n      else{\n        if (animations[i][5] === true) {\n          setTimeout(() => {\n            //get the idx of the values we need to swap\n            const [barOneIdx, barTwoIdx] = animations[i];\n            \n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            //get the values\n            const barOneNewHeight = animations[i][2];\n            const barTwoNeWHeight = animations[i][3];\n            //swap the values\n            barOneStyle.height = `${barTwoNeWHeight}px`;\n            barTwoStyle.height = `${barOneNewHeight}px`;\n\n            const j = animations[i][4] //sorted bars\n            if (j>0) {\n              const sortedBar = arrayBars[arrayBars.length - j  ].style;\n              sortedBar.backgroundColor = SORTED_COLOR; \n            }\n\n          }, i * this.state.delay/animationSpeed);\n        }\n      }\n  } \n  \n}\n\n  mergeSort(){\n    this.state.delay=2;\n    this.disableButtons();\n    var animationSpeed = this.rangeValue();\n\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      var arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.delay/animationSpeed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          if (i=== animations.length-4) {\n            this.enableButtons();\n            this.changeBarsColor(SORTED_COLOR);           \n          }\n        }, i * this.state.delay/animationSpeed);        \n      }              \n    }\n  }\n  \n\n\n  render() {\n\n    const {array} = this.state;\n    return (\n      \n    <> \n      <nav id=\"header\" class=\"navbar navbar-expand-lg navbar-dark  bg-dark bg-company-red fixed-top\"  >\n        <div class='container'>\n          <a class=\"navbar-brand\" ><p>Sorting Visualizer  |</p></a>\n          <p1>Animation Speed</p1>\n          <div className=\"range-slider\">\n            <input type=\"range\" class=\"form-range\" min=\"0.5\" max=\"2\" step=\"0.01\" defaultValue=\"1\" id=\"customRange\"/>       \n          </div>\n          <p2>|</p2>\n          <div className=\"new-array\">\n              <button type=\"button\" id='button1' class=\"btn btn-outline-primary navbar-btn\"  onClick={() => this.generateRandomArray()}> \n              Generate New Array\n              </button>\n          </div>\n          <div className=\"bubble-sort\">\n              <button type=\"button\" id='button2' class=\"btn btn-outline-primary navbar-btn\"  onClick={() => this.bubbleSort()}> \n              Bubble Sort\n              </button>\n          </div>\n          <div className=\"merge-sort\">\n              <button type=\"button\" id='button3' class=\"btn btn-outline-primary navbar-btn\"  onClick={() => this.mergeSort()}> \n              Merge Sort\n              </button>\n          </div>    \n        </div>\n     </nav>\n\n\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        </div>\n      </> \n    );\n  }\n}\n \nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}